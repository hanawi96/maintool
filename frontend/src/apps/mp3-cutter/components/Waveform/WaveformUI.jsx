import React, { useEffect, useRef, memo } from 'react';
import { WAVEFORM_CONFIG } from '../../utils/constants.js';

// üöÄ **ULTRA-OPTIMIZED COMPONENT** - Lo·∫°i b·ªè excessive re-renders
export const WaveformUI = memo(({ hoverTooltip, handleTooltips, mainCursorTooltip }) => {
  // üîß **MINIMAL DEBUG REFS** - Ch·ªâ track c·∫ßn thi·∫øt
  const renderCountRef = useRef(0);
  const lastLogTimeRef = useRef(0);
  const lastTooltipStateRef = useRef(null);
  
  // üÜï **WAVEFORM CONSTANTS** - S·ª≠ d·ª•ng height t·ª´ config ƒë·ªÉ positioning ch√≠nh x√°c
  const WAVEFORM_HEIGHT = WAVEFORM_CONFIG.HEIGHT; // 200px
  
  // üéØ **MINIMAL TOOLTIP STYLING** - Ultra compact v√† subtle design
  const TOOLTIP_CONFIG = {
    // üî§ **ULTRA SMALL FONT**: Gi·∫£m t·ª´ 9px xu·ªëng 7px ƒë·ªÉ ultra compact
    FONT_SIZE: '7px',
    
    // üìè **DURATION ULTRA CLOSE**: S√°t ƒë√°y waveform h∆°n n·ªØa (gi·∫£m t·ª´ -20 xu·ªëng -8)
    DURATION_OFFSET: -8, // 200-8=192px from top, c·ª±c k√¨ s√°t ƒë√°y
    
    // ü§ö **HANDLE TOOLTIPS**: Gi·ªØ nguy√™n kho·∫£ng c√°ch tr√°nh handles
    HANDLE_OFFSET: 15, // 200+15=215px from top, tr√°nh overlap v·ªõi handles
    
    // üñ±Ô∏è **HOVER TOOLTIP**: Gi·ªØ nguy√™n position tr√™n waveform
    HOVER_OFFSET: -25,
    
    // üîµ **MAIN CURSOR TOOLTIP**: Position r·∫•t g·∫ßn main cursor - theo y√™u c·∫ßu user
    MAIN_CURSOR_OFFSET: -5, // Ch·ªâ 5px tr√™n cursor line - c·ª±c k√¨ g·∫ßn cursor
    
    // üé® **MINIMAL STYLING**: B·ªè t·∫•t c·∫£ hi·ªáu ·ª©ng m√†u s·∫Øc v√† t√¥ ƒë·∫≠m
    COLOR: '#9ca3af', // M√†u x√°m neutral cho t·∫•t c·∫£ tooltips
    FONT_WEIGHT: '400', // Normal weight thay v√¨ bold
    
    // üÜï **MAIN CURSOR STYLING**: Styling ri√™ng cho main cursor tooltip
    MAIN_CURSOR_FONT_SIZE: '6px', // Font nh·ªè h∆°n cho main cursor
    MAIN_CURSOR_COLOR: '#374151', // M√†u ƒë·∫≠m h∆°n cho main cursor
    MAIN_CURSOR_FONT_WEIGHT: '600' // Bold cho main cursor
  };

  // üöÄ **HEAVY THROTTLED DEBUG** - Ch·ªâ log m·ªói 3 gi√¢y ho·∫∑c khi c√≥ thay ƒë·ªïi l·ªõn
  useEffect(() => {
    renderCountRef.current++;
    const now = performance.now();
    
    // üéØ **SIGNIFICANT CHANGE DETECTION** - Ch·ªâ log khi th·ª±c s·ª± c·∫ßn thi·∫øt
    const currentState = {
      hasHover: !!hoverTooltip,
      hoverVisible: hoverTooltip?.visible,
      hoverX: hoverTooltip?.x,
      hasHandles: !!handleTooltips,
      startVisible: handleTooltips?.start?.visible,
      endVisible: handleTooltips?.end?.visible,
      durationVisible: handleTooltips?.selectionDuration?.visible,
      // üÜï **MAIN CURSOR STATE**: Track main cursor tooltip state
      hasMainCursor: !!mainCursorTooltip,
      mainCursorVisible: mainCursorTooltip?.visible,
      mainCursorX: mainCursorTooltip?.x
    };
    
    const lastState = lastTooltipStateRef.current;
    const hasSignificantChange = !lastState ||
      currentState.hasHover !== lastState.hasHover ||
      currentState.hoverVisible !== lastState.hoverVisible ||
      currentState.hoverX !== lastState.hoverX ||
      currentState.hasHandles !== lastState.hasHandles ||
      currentState.startVisible !== lastState.startVisible ||
      currentState.endVisible !== lastState.endVisible ||
      currentState.durationVisible !== lastState.durationVisible ||
      // üÜï **MAIN CURSOR CHANGE DETECTION**: Track main cursor changes
      currentState.hasMainCursor !== lastState.hasMainCursor ||
      currentState.mainCursorVisible !== lastState.mainCursorVisible ||
      currentState.mainCursorX !== lastState.mainCursorX ||
      Math.abs((currentState.hoverX || 0) - (lastState.hoverX || 0)) > 10 || // 10px threshold
      Math.abs((currentState.mainCursorX || 0) - (lastState.mainCursorX || 0)) > 5; // 5px threshold cho main cursor
    
    // üöÄ **ULTRA REDUCED LOGGING** - Ch·ªâ log m·ªói 5 gi√¢y ho·∫∑c changes l·ªõn
    if ((now - lastLogTimeRef.current > 5000) || hasSignificantChange) {
      lastLogTimeRef.current = now;
      lastTooltipStateRef.current = currentState;
      
      // üéØ **MINIMAL STYLING DEBUG LOG** - Bao g·ªìm main cursor tooltip
      if (renderCountRef.current % 50 === 0 || hasSignificantChange) {
        console.log(`üé® [WaveformUI] Minimal Tooltip Styling #${renderCountRef.current}:`, {
          tooltip: currentState.hasHover ? 'ACTIVE' : 'INACTIVE',
          x: currentState.hoverX ? `${currentState.hoverX.toFixed(0)}px` : 'N/A',
          handles: `Start:${currentState.startVisible} End:${currentState.endVisible}`,
          // üÜï **MAIN CURSOR LOG**: Bao g·ªìm main cursor tooltip state
          mainCursor: currentState.hasMainCursor ? 
            `ACTIVE (${currentState.mainCursorX?.toFixed(0)}px)` : 'INACTIVE',
          positioning: {
            waveformHeight: `${WAVEFORM_HEIGHT}px`,
            hoverTooltip: `${TOOLTIP_CONFIG.HOVER_OFFSET}px (above waveform)`,
            durationTooltip: `${WAVEFORM_HEIGHT + TOOLTIP_CONFIG.DURATION_OFFSET}px (ch·ªâ ${Math.abs(TOOLTIP_CONFIG.DURATION_OFFSET)}px t·ª´ ƒë√°y!)`,
            handleTooltips: `${WAVEFORM_HEIGHT + TOOLTIP_CONFIG.HANDLE_OFFSET}px (${TOOLTIP_CONFIG.HANDLE_OFFSET}px below waveform)`,
            // üÜï **MAIN CURSOR POSITION**: Th√™m main cursor position
            mainCursorTooltip: `${TOOLTIP_CONFIG.MAIN_CURSOR_OFFSET}px (ch·ªâ 5px tr√™n main cursor line - c·ª±c k√¨ g·∫ßn!)`
          },
          styling: {
            fontSize: TOOLTIP_CONFIG.FONT_SIZE,
            color: TOOLTIP_CONFIG.COLOR,
            fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT,
            // üÜï **MAIN CURSOR STYLING**: Bao g·ªìm styling ri√™ng cho main cursor
            mainCursorFontSize: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_SIZE,
            mainCursorColor: TOOLTIP_CONFIG.MAIN_CURSOR_COLOR,
            mainCursorFontWeight: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_WEIGHT,
            improvements: 'Ultra compact: 7px font, no colors, no bold, main cursor 6px+ƒë·∫≠m+g·∫ßn'
          }
        });
      }
    }
  });

  // üöÄ **CONDITIONAL RENDERING** - Ch·ªâ render khi th·ª±c s·ª± c·∫ßn thi·∫øt
  const shouldRenderHoverTooltip = hoverTooltip?.visible && 
    typeof hoverTooltip.x === 'number' && 
    !isNaN(hoverTooltip.x) &&
    hoverTooltip.x >= 0;

  const shouldRenderStartTooltip = handleTooltips?.start?.visible &&
    typeof handleTooltips.start.x === 'number' &&
    !isNaN(handleTooltips.start.x) &&
    handleTooltips.start.x >= 0;

  const shouldRenderEndTooltip = handleTooltips?.end?.visible &&
    typeof handleTooltips.end.x === 'number' &&
    !isNaN(handleTooltips.end.x) &&
    handleTooltips.end.x >= 0;

  const shouldRenderDurationTooltip = handleTooltips?.selectionDuration?.visible &&
    typeof handleTooltips.selectionDuration.x === 'number' &&
    !isNaN(handleTooltips.selectionDuration.x) &&
    handleTooltips.selectionDuration.x >= 0;

  // üÜï **MAIN CURSOR TOOLTIP RENDER CHECK**: Ch·ªâ render khi main cursor ƒëang hi·ªÉn th·ªã
  const shouldRenderMainCursorTooltip = mainCursorTooltip?.visible &&
    typeof mainCursorTooltip.x === 'number' &&
    !isNaN(mainCursorTooltip.x) &&
    mainCursorTooltip.x >= 0;

  // üîß **INSTANT TOOLTIP DEBUG**: Log instant positioning v√† verify zero delay
  useEffect(() => {
    if (shouldRenderDurationTooltip && Math.random() < 0.1) { // 10% sampling
      console.log('üìè [INSTANT-TOOLTIP] Duration positioned via DIRECT CALCULATION:', {
        x: handleTooltips.selectionDuration.x,
        calculatedTop: WAVEFORM_HEIGHT + TOOLTIP_CONFIG.DURATION_OFFSET,
        waveformHeight: WAVEFORM_HEIGHT,
        offset: TOOLTIP_CONFIG.DURATION_OFFSET,
        distanceFromBottom: Math.abs(TOOLTIP_CONFIG.DURATION_OFFSET),
        method: 'INSTANT_SYNC_NO_ANIMATION_FRAMES',
        result: `C·ª∞C K√å S√ÅT ƒê√ÅY - ch·ªâ ${Math.abs(TOOLTIP_CONFIG.DURATION_OFFSET)}px t·ª´ ƒë√°y waveform!`
      });
    }
    
    if ((shouldRenderStartTooltip || shouldRenderEndTooltip) && Math.random() < 0.1) { // 10% sampling
      console.log('ü§ö [INSTANT-TOOLTIP] Handle positions via DIRECT CALCULATION:', {
        startX: shouldRenderStartTooltip ? handleTooltips.start.x : 'N/A',
        endX: shouldRenderEndTooltip ? handleTooltips.end.x : 'N/A',
        calculatedTop: WAVEFORM_HEIGHT + TOOLTIP_CONFIG.HANDLE_OFFSET,
        method: 'INSTANT_SYNC_FROM_PROPS',
        performance: 'ZERO_DELAY_GUARANTEED',
        styling: {
          fontSize: TOOLTIP_CONFIG.FONT_SIZE,
          color: TOOLTIP_CONFIG.COLOR,
          fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT,
          note: 'B·ªè h·∫øt m√†u s·∫Øc v√† t√¥ ƒë·∫≠m - minimal design + instant response'
        }
      });
    }
    
    // üÜï **MAIN CURSOR TOOLTIP DEBUG**: Log main cursor positioning
    if (shouldRenderMainCursorTooltip && Math.random() < 0.02) { // 2% sampling ƒë·ªÉ tr√°nh spam
      console.log('üîµ [INSTANT-MAIN-CURSOR-TOOLTIP] Position via DIRECT CALCULATION:', {
        x: mainCursorTooltip.x,
        calculatedTop: TOOLTIP_CONFIG.MAIN_CURSOR_OFFSET,
        currentTime: mainCursorTooltip.time?.toFixed(3) + 's',
        formattedTime: mainCursorTooltip.formattedTime,
        method: 'INSTANT_SYNC_FROM_CURRENT_TIME',
        performance: 'ZERO_DELAY_GUARANTEED',
        positioning: 'Ch·ªâ 5px tr√™n main cursor line - c·ª±c k√¨ g·∫ßn theo y√™u c·∫ßu user',
        styling: {
          fontSize: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_SIZE, // 6px
          color: TOOLTIP_CONFIG.MAIN_CURSOR_COLOR, // darker
          fontWeight: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_WEIGHT, // bold
          note: 'Font nh·ªè h∆°n (6px), m√†u ƒë·∫≠m h∆°n, bold - theo y√™u c·∫ßu user'
        }
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [shouldRenderDurationTooltip, shouldRenderStartTooltip, shouldRenderEndTooltip, shouldRenderMainCursorTooltip, handleTooltips, mainCursorTooltip]);

  return (
    <>
      {/* üñ±Ô∏è **HOVER TOOLTIP** - ULTRA MINIMAL: Font c·ª±c nh·ªè, m√†u neutral */}
      {shouldRenderHoverTooltip && (
        <div
          className="absolute pointer-events-none text-xs z-50"
          style={{
            left: `${hoverTooltip.x}px`,
            top: `${TOOLTIP_CONFIG.HOVER_OFFSET}px`, // Gi·ªØ nguy√™n -25px
            transform: 'translateX(-50%)',
            color: TOOLTIP_CONFIG.COLOR, // üé® **NEUTRAL**: M√†u x√°m thay v√¨ m√†u ri√™ng
            fontSize: TOOLTIP_CONFIG.FONT_SIZE, // üî§ **ULTRA SMALL**: 7px c·ª±c compact
            fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT, // üö´ **NO BOLD**: Normal weight
            fontFamily: 'monospace', // üÜï **MONOSPACE**: Font mono cho s·ªë
            whiteSpace: 'nowrap'
          }}
        >
          {hoverTooltip.formattedTime}
        </div>
      )}

      {/* ü§ö **START HANDLE TOOLTIP** - MINIMAL STYLING: B·ªè m√†u teal, b·ªè bold */}
      {shouldRenderStartTooltip && (
        <div
          className="absolute pointer-events-none text-xs z-50"
          style={{
            left: `${handleTooltips.start.x}px`,
            top: `${WAVEFORM_HEIGHT + TOOLTIP_CONFIG.HANDLE_OFFSET}px`, // Gi·ªØ nguy√™n +15px
            transform: 'translateX(-50%)',
            color: TOOLTIP_CONFIG.COLOR, // üé® **NEUTRAL**: B·ªè m√†u teal, d√πng x√°m
            fontSize: TOOLTIP_CONFIG.FONT_SIZE, // üî§ **ULTRA SMALL**: 7px c·ª±c compact
            fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT, // üö´ **NO BOLD**: B·ªè t√¥ ƒë·∫≠m
            fontFamily: 'monospace', // üÜï **MONOSPACE**: Font mono cho s·ªë
            whiteSpace: 'nowrap'
          }}
        >
          {handleTooltips.start.formattedTime}
        </div>
      )}

      {/* ü§ö **END HANDLE TOOLTIP** - MINIMAL STYLING: B·ªè m√†u orange, b·ªè bold */}
      {shouldRenderEndTooltip && (
        <div
          className="absolute pointer-events-none text-xs z-50"
          style={{
            left: `${handleTooltips.end.x}px`,
            top: `${WAVEFORM_HEIGHT + TOOLTIP_CONFIG.HANDLE_OFFSET}px`, // Gi·ªØ nguy√™n +15px
            transform: 'translateX(-50%)',
            color: TOOLTIP_CONFIG.COLOR, // üé® **NEUTRAL**: B·ªè m√†u orange, d√πng x√°m
            fontSize: TOOLTIP_CONFIG.FONT_SIZE, // üî§ **ULTRA SMALL**: 7px c·ª±c compact
            fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT, // üö´ **NO BOLD**: B·ªè t√¥ ƒë·∫≠m
            fontFamily: 'monospace', // üÜï **MONOSPACE**: Font mono cho s·ªë
            whiteSpace: 'nowrap'
          }}
        >
          {handleTooltips.end.formattedTime}
        </div>
      )}

      {/* üìè **DURATION TOOLTIP** - ULTRA CLOSE TO BOTTOM: C·ª±c k√¨ s√°t ƒë√°y waveform */}
      {shouldRenderDurationTooltip && (
        <div
          className="absolute pointer-events-none text-xs z-50"
          style={{
            left: `${handleTooltips.selectionDuration.x}px`,
            top: `${WAVEFORM_HEIGHT + TOOLTIP_CONFIG.DURATION_OFFSET}px`, // üîß **ULTRA CLOSE**: -8px t·ª´ ƒë√°y!
            transform: 'translateX(-50%)',
            color: TOOLTIP_CONFIG.COLOR, // üé® **NEUTRAL**: B·ªè m√†u purple, d√πng x√°m
            fontSize: TOOLTIP_CONFIG.FONT_SIZE, // üî§ **ULTRA SMALL**: 7px c·ª±c compact
            fontWeight: TOOLTIP_CONFIG.FONT_WEIGHT, // üö´ **NO BOLD**: B·ªè t√¥ ƒë·∫≠m
            fontFamily: 'monospace', // üÜï **MONOSPACE**: Font mono cho s·ªë
            whiteSpace: 'nowrap'
          }}
        >
          {handleTooltips.selectionDuration.formattedTime}
        </div>
      )}

      {/* üîµ **MAIN CURSOR TOOLTIP** - MINIMAL STYLING: Tr√™n main cursor line khi ƒëang play */}
      {shouldRenderMainCursorTooltip && (
        <div
          className="absolute pointer-events-none text-xs z-50"
          style={{
            left: `${mainCursorTooltip.x}px`,
            top: `${TOOLTIP_CONFIG.MAIN_CURSOR_OFFSET}px`, // üîß **ABOVE CURSOR**: -5px ƒë·ªÉ g·∫ßn cursor h∆°n
            transform: 'translateX(-50%)',
            color: TOOLTIP_CONFIG.MAIN_CURSOR_COLOR, // üé® **DARKER**: M√†u ƒë·∫≠m h∆°n cho main cursor
            fontSize: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_SIZE, // üî§ **SMALLER**: Font nh·ªè h∆°n cho main cursor
            fontWeight: TOOLTIP_CONFIG.MAIN_CURSOR_FONT_WEIGHT, // üö´ **BOLD**: Bold cho main cursor
            fontFamily: 'monospace', // üÜï **MONOSPACE**: Font mono cho s·ªë
            whiteSpace: 'nowrap'
          }}
        >
          {mainCursorTooltip.formattedTime}
        </div>
      )}
    </>
  );
});

WaveformUI.displayName = 'WaveformUI';